def cronExpr = env.BRANCH_IS_PRIMARY ? '@daily' : ''
def reportsFolder = 'plugin-health-scoring'
def etagsFile = 'etags.txt'
def reportFile = env.BRANCH_IS_PRIMARY ? 'scores.json' : "scores-${env.BRANCH_NAME}.json"
def reportLines = 0

pipeline {
  agent {
    label 'jnlp-linux-arm64'
  }

  options {
    buildDiscarder logRotator(daysToKeepStr: '90')
    lock(resource: 'plugin-health-scoring', inversePrecedence: true)
    timeout(time: 5, unit: 'MINUTES')
    disableConcurrentBuilds()
  }

  triggers {
    cron( cronExpr )
  }

  stages {
    stage('Fetch API') {
      environment {
        REPORTS_FOLDER = "${reportsFolder}"
        ETAGS_FILE = "${etagsFile}"
        REPORT_FILE = "${reportFile}"
        HEALTH_URL = 'https://plugin-health.jenkins.io/api/scores'
      }

      steps {
        script {
          reportLines = sh(returnStdout:true, script: '''
            curl --location --silent --show-error --remote-name "https://reports.jenkins.io/${REPORTS_FOLDER}/${ETAGS_FILE}" || echo "No previous etags file."
            bash fetch-report.sh
            mkdir -p "${REPORTS_FOLDER}"
            cp "${REPORT_FILE}" "${ETAGS_FILE}" "${REPORTS_FOLDER}/"

            wc -l "${REPORT_FILE}"
          ''').trim()
        }
      }
    }

    stage('Publish') {
      when {
        expression {
          infra.isInfra() && reportLines > 0
        }
      }

      steps {
        publishReports([ "${reportsFolder}/${reportFile}", "${reportsFolder}/${etagsFile}" ])
      }
    }
  }
}
